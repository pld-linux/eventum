--- eventum-2.2/htdocs/ajax/order.php	1970-01-01 02:00:00.000000000 +0200
+++ eventum-2.2-order/htdocs/ajax/order.php	2009-10-12 22:10:36.429185594 +0300
@@ -0,0 +1,69 @@
+<?
+require_once dirname(__FILE__) . '/../../init.php';
+
+// check login
+if (!Auth::hasValidCookie(APP_COOKIE)) {
+	exit;
+}
+
+
+if (!isset($_POST['before']) || !isset($_POST['after'])) {
+	exit;
+}
+
+parse_str($_POST['before'], $before);
+parse_str($_POST['after'], $after);
+
+$before = $before['issue_list_table'];
+$after = $after['issue_list_table'];
+
+
+$before = array_slice($before, 2, count($before)-3);
+$after = array_slice($after, 2, count($after)-3);
+
+if (count($before) != count($after) or count($before) < 1) {
+	exit;
+}
+
+$usr_id = Auth::getUserID();
+
+$order = Issue::getIssueOrderByUser($usr_id);
+
+if (!count($order)) {
+    // no prev order list
+    exit;
+}
+
+$after_filterd = array();
+$before_filterd = array();
+
+// remove issues that are not assigned to me
+foreach ($after as $id) {
+    if (isset($order[$id])) {
+        $after_filterd[] = $id;
+    }
+}
+foreach ($before as $id) {
+    if (isset($order[$id])) {
+        $before_filterd[] = $id;
+    }
+}
+
+foreach ($after_filterd as $key => $nID) {
+    if ($nID != $before_filterd[$key]) {
+        if ($nID) {
+            $stmt = "UPDATE
+                        " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
+                     SET
+                        isu_order = " . $order[$before_filterd[$key]] . "
+                     WHERE
+                        isu_iss_id = $nID AND
+                        isu_usr_id = $usr_id";
+            $res = DB_Helper::getInstance()->query($stmt);
+            if (PEAR::isError($res)) {
+                Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
+                die('update failed');
+            }
+        }
+    }
+}
--- eventum-2.2/htdocs/css/style.css~	2009-10-12 22:27:13.000000000 +0300
+++ eventum-2.2/htdocs/css/style.css	2009-10-12 22:28:31.402712101 +0300
@@ -176,3 +176,22 @@
 .custom_field {
     cursor: pointer;
 }
+
+.tDnD_whileDrag td {
+    background-color: #ffffdd;
+}
+.tDnD_whileDrag td {
+    border: 1px solid red;
+}
+.inline_date_pick {
+    cursor: pointer;
+}
+.custom_field {
+    cursor: pointer;
+}
+.showDragHandle {
+    cursor: move;
+	background-image: url(../images/updown2.gif);
+    background-repeat: no-repeat;
+    background-position: center center;
+}
--- eventum-2.2/htdocs/js/jquery/jquery.tablednd.js	1970-01-01 02:00:00.000000000 +0200
+++ eventum-2.2-order/htdocs/js/jquery/jquery.tablednd.js	2009-10-12 22:10:36.435851675 +0300
@@ -0,0 +1,382 @@
+/**
+ * TableDnD plug-in for JQuery, allows you to drag and drop table rows
+ * You can set up various options to control how the system will work
+ * Copyright (c) Denis Howlett <denish@isocra.com>
+ * Licensed like jQuery, see http://docs.jquery.com/License.
+ *
+ * Configuration options:
+ * 
+ * onDragStyle
+ *     This is the style that is assigned to the row during drag. There are limitations to the styles that can be
+ *     associated with a row (such as you can't assign a border--well you can, but it won't be
+ *     displayed). (So instead consider using onDragClass.) The CSS style to apply is specified as
+ *     a map (as used in the jQuery css(...) function).
+ * onDropStyle
+ *     This is the style that is assigned to the row when it is dropped. As for onDragStyle, there are limitations
+ *     to what you can do. Also this replaces the original style, so again consider using onDragClass which
+ *     is simply added and then removed on drop.
+ * onDragClass
+ *     This class is added for the duration of the drag and then removed when the row is dropped. It is more
+ *     flexible than using onDragStyle since it can be inherited by the row cells and other content. The default
+ *     is class is tDnD_whileDrag. So to use the default, simply customise this CSS class in your
+ *     stylesheet.
+ * onDrop
+ *     Pass a function that will be called when the row is dropped. The function takes 2 parameters: the table
+ *     and the row that was dropped. You can work out the new order of the rows by using
+ *     table.rows.
+ * onDragStart
+ *     Pass a function that will be called when the user starts dragging. The function takes 2 parameters: the
+ *     table and the row which the user has started to drag.
+ * onAllowDrop
+ *     Pass a function that will be called as a row is over another row. If the function returns true, allow 
+ *     dropping on that row, otherwise not. The function takes 2 parameters: the dragged row and the row under
+ *     the cursor. It returns a boolean: true allows the drop, false doesn't allow it.
+ * scrollAmount
+ *     This is the number of pixels to scroll if the user moves the mouse cursor to the top or bottom of the
+ *     window. The page should automatically scroll up or down as appropriate (tested in IE6, IE7, Safari, FF2,
+ *     FF3 beta
+ * dragHandle
+ *     This is the name of a class that you assign to one or more cells in each row that is draggable. If you
+ *     specify this class, then you are responsible for setting cursor: move in the CSS and only these cells
+ *     will have the drag behaviour. If you do not specify a dragHandle, then you get the old behaviour where
+ *     the whole row is draggable.
+ * 
+ * Other ways to control behaviour:
+ *
+ * Add class="nodrop" to any rows for which you don't want to allow dropping, and class="nodrag" to any rows
+ * that you don't want to be draggable.
+ *
+ * Inside the onDrop method you can also call $.tableDnD.serialize() this returns a string of the form
+ * <tableID>[]=<rowID1>&<tableID>[]=<rowID2> so that you can send this back to the server. The table must have
+ * an ID as must all the rows.
+ *
+ * Other methods:
+ *
+ * $("...").tableDnDUpdate() 
+ * Will update all the matching tables, that is it will reapply the mousedown method to the rows (or handle cells).
+ * This is useful if you have updated the table rows using Ajax and you want to make the table draggable again.
+ * The table maintains the original configuration (so you don't have to specify it again).
+ *
+ * $("...").tableDnDSerialize()
+ * Will serialize and return the serialized string as above, but for each of the matching tables--so it can be
+ * called from anywhere and isn't dependent on the currentTable being set up correctly before calling
+ *
+ * Known problems:
+ * - Auto-scoll has some problems with IE7  (it scrolls even when it shouldn't), work-around: set scrollAmount to 0
+ * 
+ * Version 0.2: 2008-02-20 First public version
+ * Version 0.3: 2008-02-07 Added onDragStart option
+ *                         Made the scroll amount configurable (default is 5 as before)
+ * Version 0.4: 2008-03-15 Changed the noDrag/noDrop attributes to nodrag/nodrop classes
+ *                         Added onAllowDrop to control dropping
+ *                         Fixed a bug which meant that you couldn't set the scroll amount in both directions
+ *                         Added serialize method
+ * Version 0.5: 2008-05-16 Changed so that if you specify a dragHandle class it doesn't make the whole row
+ *                         draggable
+ *                         Improved the serialize method to use a default (and settable) regular expression.
+ *                         Added tableDnDupate() and tableDnDSerialize() to be called when you are outside the table
+ */
+jQuery.tableDnD = {
+    /** Keep hold of the current table being dragged */
+    currentTable : null,
+    /** Keep hold of the current drag object if any */
+    dragObject: null,
+    /** The current mouse offset */
+    mouseOffset: null,
+    /** Remember the old value of Y so that we don't do too much processing */
+    oldY: 0,
+
+    /** Actually build the structure */
+    build: function(options) {
+        // Set up the defaults if any
+
+        this.each(function() {
+            // This is bound to each matching table, set up the defaults and override with user options
+            this.tableDnDConfig = jQuery.extend({
+                onDragStyle: null,
+                onDropStyle: null,
+				// Add in the default class for whileDragging
+				onDragClass: "tDnD_whileDrag",
+                onDrop: null,
+                onDragStart: null,
+                scrollAmount: 5,
+				serializeRegexp: /[^\-]*$/, // The regular expression to use to trim row IDs
+				serializeParamName: null, // If you want to specify another parameter name instead of the table ID
+                dragHandle: null // If you give the name of a class here, then only Cells with this class will be draggable
+            }, options || {});
+            // Now make the rows draggable
+            jQuery.tableDnD.makeDraggable(this);
+        });
+
+        // Now we need to capture the mouse up and mouse move event
+        // We can use bind so that we don't interfere with other event handlers
+        jQuery(document)
+            .bind('mousemove', jQuery.tableDnD.mousemove)
+            .bind('mouseup', jQuery.tableDnD.mouseup);
+
+        // Don't break the chain
+        return this;
+    },
+
+    /** This function makes all the rows on the table draggable apart from those marked as "NoDrag" */
+    makeDraggable: function(table) {
+        var config = table.tableDnDConfig;
+		if (table.tableDnDConfig.dragHandle) {
+			// We only need to add the event to the specified cells
+			var cells = jQuery("td."+table.tableDnDConfig.dragHandle, table);
+			cells.each(function() {
+				// The cell is bound to "this"
+                jQuery(this).mousedown(function(ev) {
+                    jQuery.tableDnD.dragObject = this.parentNode;
+                    jQuery.tableDnD.currentTable = table;
+                    jQuery.tableDnD.mouseOffset = jQuery.tableDnD.getMouseOffset(this, ev);
+                    if (config.onDragStart) {
+                        // Call the onDrop method if there is one
+                        config.onDragStart(table, this);
+                    }
+                    return false;
+                });
+			})
+		} else {
+			// For backwards compatibility, we add the event to the whole row
+	        var rows = jQuery("tr", table); // get all the rows as a wrapped set
+	        rows.each(function() {
+				// Iterate through each row, the row is bound to "this"
+				var row = jQuery(this);
+				if (! row.hasClass("nodrag")) {
+	                row.mousedown(function(ev) {
+	                    if (ev.target.tagName == "TD") {
+	                        jQuery.tableDnD.dragObject = this;
+	                        jQuery.tableDnD.currentTable = table;
+	                        jQuery.tableDnD.mouseOffset = jQuery.tableDnD.getMouseOffset(this, ev);
+	                        if (config.onDragStart) {
+	                            // Call the onDrop method if there is one
+	                            config.onDragStart(table, this);
+	                        }
+	                        return false;
+	                    }
+	                }).css("cursor", "move"); // Store the tableDnD object
+				}
+			});
+		}
+	},
+
+	updateTables: function() {
+		this.each(function() {
+			// this is now bound to each matching table
+			if (this.tableDnDConfig) {
+				jQuery.tableDnD.makeDraggable(this);
+			}
+		})
+	},
+
+    /** Get the mouse coordinates from the event (allowing for browser differences) */
+    mouseCoords: function(ev){
+        if(ev.pageX || ev.pageY){
+            return {x:ev.pageX, y:ev.pageY};
+        }
+        return {
+            x:ev.clientX + document.body.scrollLeft - document.body.clientLeft,
+            y:ev.clientY + document.body.scrollTop  - document.body.clientTop
+        };
+    },
+
+    /** Given a target element and a mouse event, get the mouse offset from that element.
+        To do this we need the element's position and the mouse position */
+    getMouseOffset: function(target, ev) {
+        ev = ev || window.event;
+
+        var docPos    = this.getPosition(target);
+        var mousePos  = this.mouseCoords(ev);
+        return {x:mousePos.x - docPos.x, y:mousePos.y - docPos.y};
+    },
+
+    /** Get the position of an element by going up the DOM tree and adding up all the offsets */
+    getPosition: function(e){
+        var left = 0;
+        var top  = 0;
+        /** Safari fix -- thanks to Luis Chato for this! */
+        if (e.offsetHeight == 0) {
+            /** Safari 2 doesn't correctly grab the offsetTop of a table row
+            this is detailed here:
+            http://jacob.peargrove.com/blog/2006/technical/table-row-offsettop-bug-in-safari/
+            the solution is likewise noted there, grab the offset of a table cell in the row - the firstChild.
+            note that firefox will return a text node as a first child, so designing a more thorough
+            solution may need to take that into account, for now this seems to work in firefox, safari, ie */
+            e = e.firstChild; // a table cell
+        }
+
+        while (e.offsetParent){
+            left += e.offsetLeft;
+            top  += e.offsetTop;
+            e     = e.offsetParent;
+        }
+
+        left += e.offsetLeft;
+        top  += e.offsetTop;
+
+        return {x:left, y:top};
+    },
+
+    mousemove: function(ev) {
+        if (jQuery.tableDnD.dragObject == null) {
+            return;
+        }
+
+        var dragObj = jQuery(jQuery.tableDnD.dragObject);
+        var config = jQuery.tableDnD.currentTable.tableDnDConfig;
+        var mousePos = jQuery.tableDnD.mouseCoords(ev);
+        var y = mousePos.y - jQuery.tableDnD.mouseOffset.y;
+        //auto scroll the window
+	    var yOffset = window.pageYOffset;
+	 	if (document.all) {
+	        // Windows version
+	        //yOffset=document.body.scrollTop;
+	        if (typeof document.compatMode != 'undefined' &&
+	             document.compatMode != 'BackCompat') {
+	           yOffset = document.documentElement.scrollTop;
+	        }
+	        else if (typeof document.body != 'undefined') {
+	           yOffset=document.body.scrollTop;
+	        }
+
+	    }
+		    
+		if (mousePos.y-yOffset < config.scrollAmount) {
+	    	window.scrollBy(0, -config.scrollAmount);
+	    } else {
+            var windowHeight = window.innerHeight ? window.innerHeight
+                    : document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight;
+            if (windowHeight-(mousePos.y-yOffset) < config.scrollAmount) {
+                window.scrollBy(0, config.scrollAmount);
+            }
+        }
+
+
+        if (y != jQuery.tableDnD.oldY) {
+            // work out if we're going up or down...
+            var movingDown = y > jQuery.tableDnD.oldY;
+            // update the old value
+            jQuery.tableDnD.oldY = y;
+            // update the style to show we're dragging
+			if (config.onDragClass) {
+				dragObj.addClass(config.onDragClass);
+			} else {
+	            dragObj.css(config.onDragStyle);
+			}
+            // If we're over a row then move the dragged row to there so that the user sees the
+            // effect dynamically
+            var currentRow = jQuery.tableDnD.findDropTargetRow(dragObj, y);
+            if (currentRow) {
+                // TODO worry about what happens when there are multiple TBODIES
+                if (movingDown && jQuery.tableDnD.dragObject != currentRow) {
+                    jQuery.tableDnD.dragObject.parentNode.insertBefore(jQuery.tableDnD.dragObject, currentRow.nextSibling);
+                } else if (! movingDown && jQuery.tableDnD.dragObject != currentRow) {
+                    jQuery.tableDnD.dragObject.parentNode.insertBefore(jQuery.tableDnD.dragObject, currentRow);
+                }
+            }
+        }
+
+        return false;
+    },
+
+    /** We're only worried about the y position really, because we can only move rows up and down */
+    findDropTargetRow: function(draggedRow, y) {
+        var rows = jQuery.tableDnD.currentTable.rows;
+        for (var i=0; i<rows.length; i++) {
+            var row = rows[i];
+            var rowY    = this.getPosition(row).y;
+            var rowHeight = parseInt(row.offsetHeight)/2;
+            if (row.offsetHeight == 0) {
+                rowY = this.getPosition(row.firstChild).y;
+                rowHeight = parseInt(row.firstChild.offsetHeight)/2;
+            }
+            // Because we always have to insert before, we need to offset the height a bit
+            if ((y > rowY - rowHeight) && (y < (rowY + rowHeight))) {
+                // that's the row we're over
+				// If it's the same as the current row, ignore it
+				if (row == draggedRow) {return null;}
+                var config = jQuery.tableDnD.currentTable.tableDnDConfig;
+                if (config.onAllowDrop) {
+                    if (config.onAllowDrop(draggedRow, row)) {
+                        return row;
+                    } else {
+                        return null;
+                    }
+                } else {
+					// If a row has nodrop class, then don't allow dropping (inspired by John Tarr and Famic)
+                    var nodrop = jQuery(row).hasClass("nodrop");
+                    if (! nodrop) {
+                        return row;
+                    } else {
+                        return null;
+                    }
+                }
+                return row;
+            }
+        }
+        return null;
+    },
+
+    mouseup: function(e) {
+        if (jQuery.tableDnD.currentTable && jQuery.tableDnD.dragObject) {
+            var droppedRow = jQuery.tableDnD.dragObject;
+            var config = jQuery.tableDnD.currentTable.tableDnDConfig;
+            // If we have a dragObject, then we need to release it,
+            // The row will already have been moved to the right place so we just reset stuff
+			if (config.onDragClass) {
+	            jQuery(droppedRow).removeClass(config.onDragClass);
+			} else {
+	            jQuery(droppedRow).css(config.onDropStyle);
+			}
+            jQuery.tableDnD.dragObject   = null;
+            if (config.onDrop) {
+                // Call the onDrop method if there is one
+                config.onDrop(jQuery.tableDnD.currentTable, droppedRow);
+            }
+            jQuery.tableDnD.currentTable = null; // let go of the table too
+        }
+    },
+
+    serialize: function() {
+        if (jQuery.tableDnD.currentTable) {
+            return jQuery.tableDnD.serializeTable(jQuery.tableDnD.currentTable);
+        } else {
+            return "Error: No Table id set, you need to set an id on your table and every row";
+        }
+    },
+
+	serializeTable: function(table) {
+        var result = "";
+        var tableId = table.id;
+        var rows = table.rows;
+        for (var i=0; i<rows.length; i++) {
+            if (result.length > 0) result += "&";
+            var rowId = rows[i].id;
+            if (rowId && rowId && table.tableDnDConfig && table.tableDnDConfig.serializeRegexp) {
+                rowId = rowId.match(table.tableDnDConfig.serializeRegexp)[0];
+            }
+
+            result += tableId + '[]=' + rowId;
+        }
+        return result;
+	},
+
+	serializeTables: function() {
+        var result = "";
+        this.each(function() {
+			// this is now bound to each matching table
+			result += jQuery.tableDnD.serializeTable(this);
+		});
+        return result;
+    }
+
+}
+
+jQuery.fn.extend(
+	{
+		tableDnD : jQuery.tableDnD.build,
+		tableDnDUpdate : jQuery.tableDnD.updateTables,
+		tableDnDSerialize: jQuery.tableDnD.serializeTables
+	}
+);
\ No newline at end of file
--- eventum-2.2/htdocs/list.php	2009-09-14 18:07:55.000000000 +0300
+++ eventum-2.2-order/htdocs/list.php	2009-10-12 22:10:36.435851675 +0300
@@ -53,6 +53,11 @@
             $profile['sort_by'] . "&sort_order=" . $profile['sort_order']);
 }
 
+@$reorder_usr_id = $_REQUEST["reorder_user"];
+@$reorder_issue_id = $_REQUEST["reorder_source"];
+@$reorder_neworder = $_REQUEST["reorder_neworder"];
+Issue::reorderUserIssues($reorder_usr_id, $reorder_issue_id, $reorder_neworder);
+
 $options = Issue::saveSearchParams();
 $tpl->assign("options", $options);
 $tpl->assign("sorting", Issue::getSortingInfo($options));
@@ -78,6 +83,24 @@
 }
 $assign_options += $users;
 
+// get the isu_order (assigned users) ordering user
+if (!empty($options["users"])) {
+    if ($options["users"] == -2) {
+        $isu_order_user = $usr_id;
+    } else
+    if ($options["users"] > 0) {
+        $isu_order_user = $options["users"];
+    } else {
+        unset($isu_order_user);
+    }
+} else {
+    unset($isu_order_user);
+}
+
+if (isset($isu_order_user)) {
+    $tpl->assign("isu_order_user", $isu_order_user);
+}
+
 $list = Issue::getListing($prj_id, $options, $pagerRow, $rows);
 $tpl->assign("list", $list["list"]);
 $tpl->assign("list_info", $list["info"]);
--- eventum-2.2/lib/eventum/class.display_column.php	2009-09-14 18:07:55.000000000 +0300
+++ eventum-2.2-order/lib/eventum/class.display_column.php	2009-10-12 22:10:36.429185594 +0300
@@ -230,7 +230,10 @@
                 ),
                 "iss_expected_resolution_date"  =>  array(
                     "title" =>  ev_gettext("Expected Resolution Date")
-                )
+                ),
+                "isu_order" => array(
+                    "title" => ev_gettext("Order")
+                ),
             )
         );
         return $columns[$page];
--- eventum-2.2/lib/eventum/class.issue.php	2009-09-14 18:07:55.000000000 +0300
+++ eventum-2.2-order/lib/eventum/class.issue.php	2009-10-12 22:10:36.445851670 +0300
@@ -1333,6 +1333,7 @@
             Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
             return -1;
         } else {
+            self::moveOrderForAllUsers($issue_id, 1000);
             $prj_id = self::getProjectID($issue_id);
 
             // record the change
@@ -1800,16 +1801,33 @@
     {
         $issue_id = Misc::escapeInteger($issue_id);
         $assignee_usr_id = Misc::escapeInteger($assignee_usr_id);
+        $order = 1;
+        // move all orders down to free "order space" for this new association
+        $stmt = "UPDATE 
+                    " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
+                 SET
+                    isu_order = isu_order + 1
+                 WHERE
+                    isu_usr_id = $assignee_usr_id AND
+                    isu_order >= $order";
+        $res = DB_Helper::getInstance()->query($stmt);
+        if (PEAR::isError($res)) {
+            Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
+            return -1;
+        }
+        // insert the new association
         $stmt = "INSERT INTO
                     " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
                  (
                     isu_iss_id,
                     isu_usr_id,
-                    isu_assigned_date
+                    isu_assigned_date,
+                    isu_order
                  ) VALUES (
                     $issue_id,
                     $assignee_usr_id,
-                    '" . Date_Helper::getCurrentDateGMT() . "'
+                    '" . Date_Helper::getCurrentDateGMT() . "',
+                    $order
                  )";
         $res = DB_Helper::getInstance()->query($stmt);
         if (PEAR::isError($res)) {
@@ -1824,6 +1842,78 @@
         }
     }
 
+    /**
+     * Method used to get the order list to be rearranged
+     * 
+     * @access  private
+     * @param   string $issue_id The issue ID or a comma seperated list of IDs already prepared for giving to mysql
+     * @param   string $usr_id The user to remove. When not specified, all users are taken as to be removed for that issue
+     * @return  mixed delete order list to be rearranged. Used as a parameter to the method of rearranging the order.
+     */
+    function getDeleteUserAssociationOrderList($issue_id, $usr_id = "")
+    {
+        // find all affected associantion orders
+        $stmt = "SELECT isu_usr_id, isu_order FROM
+                    " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
+                 WHERE
+                 isu_iss_id IN ($issue_id)";
+        if (!empty($usr_id)) {
+            $stmt.= " AND isu_usr_id IN ($usr_id)";
+        }
+        $stmt.= "ORDER BY isu_order";
+        $res = DB_Helper::getInstance()->getAll($stmt, DB_FETCHMODE_ASSOC);
+        if (PEAR::isError($res)) {
+            Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
+            return -1;
+        } else {
+            $deleted_orders = array();
+            foreach ($res as $row) {
+                if (empty($deleted_orders[$row['isu_usr_id']])) {
+                    $deleted_orders[$row['isu_usr_id']] = array();
+                }
+                $deleted_orders[$row['isu_usr_id']] [] = $row['isu_order'];
+            }
+            return $deleted_orders;
+        }
+    }
+
+    /**
+     *
+     * Method used to rearrange order list in the db according to known deleted records
+     *
+     * @access  private
+     * @param   mixed  deleteorder list
+     * @return void
+     */
+    function rearrangeDeleteUserAssociationOrderList($delete_order_list)
+    {
+        if (empty($delete_order_list) || (!is_array($delete_order_list))) {
+            return -1;
+        }
+        foreach ($delete_order_list as $isu_usr_id => $orders) {
+            for ($i = 0; $i < count($orders); $i++) { // traverse all deleted orders
+                // move the orders after them up to take the "order space" of the deleted records
+                $stmt = "UPDATE
+                            " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
+                         SET
+                            isu_order = isu_order - " . ($i+1) . "
+                         WHERE
+                            isu_usr_id = $isu_usr_id AND
+                            isu_order > " . $orders[$i];
+                if ($i < count($orders) - 1) {
+                    $stmt.=  " AND
+                            isu_order < " . $orders[$i+1];
+                }
+                $res = DB_Helper::getInstance()->query($stmt);
+                if (PEAR::isError($res)) {
+                    Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
+                    return -1;
+                }
+            }
+        }
+        return 1;
+    }
+
 
     /**
      * Method used to delete all user assignments for a specific issue.
@@ -1839,6 +1929,7 @@
         if (is_array($issue_id)) {
             $issue_id = implode(", ", $issue_id);
         }
+        $deleted_order_list = self::getDeleteUserAssociationOrderList($issue_id);
         $stmt = "DELETE FROM
                     " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
                  WHERE
@@ -1869,6 +1960,7 @@
     {
         $issue_id = Misc::escapeInteger($issue_id);
         $usr_id = Misc::escapeInteger($usr_id);
+        $delete_order_list = self::getDeleteUserAssociationOrderList($issue_id, $usr_id);
         $stmt = "DELETE FROM
                     " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
                  WHERE
@@ -1883,6 +1975,7 @@
                 History::add($issue_id, Auth::getUserID(), History::getTypeID('user_unassociated'),
                     User::getFullName($usr_id) . ' removed from issue by ' . User::getFullName(Auth::getUserID()));
             }
+            self::rearrangeDeleteUserAssociationOrderList($delete_order_list);
             return 1;
         }
     }
@@ -2342,6 +2435,11 @@
     {
         $sort_by = self::getParam('sort_by');
         $sort_order = self::getParam('sort_order');
+        $users = self::getParam('users');
+        if (empty($users) && ($sort_by == 'isu_order')) { // Sorting by isu_order is impossible when no user specified
+            unset($sort_by);
+            unset($sort_order);
+        }
         $rows = self::getParam('rows');
         $hide_closed = self::getParam('hide_closed');
         if ($hide_closed === '') {
@@ -2448,6 +2546,7 @@
             "iss_expected_resolution_date" => "desc",
             "pre_title" => "asc",
             "assigned" => "asc",
+            "isu_order" => "desc",
         );
 
         foreach ($custom_fields as $fld_id => $fld_name) {
@@ -3253,6 +3352,8 @@
         $ids = implode(", ", $ids);
         $stmt = "SELECT
                     isu_iss_id,
+                    isu_order,
+                    isu_usr_id,
                     usr_full_name
                  FROM
                     " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user,
@@ -3264,6 +3365,7 @@
         if (PEAR::isError($res)) {
             Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
         } else {
+            // gather names of the users assigned to each issue
             $t = array();
             for ($i = 0; $i < count($res); $i++) {
                 if (!empty($t[$res[$i]['isu_iss_id']])) {
@@ -3272,9 +3374,18 @@
                     $t[$res[$i]['isu_iss_id']] = $res[$i]['usr_full_name'];
                 }
             }
+            // gather orders
+            $o = array();
+            for ($i = 0; $i < count($res); $i++) {
+                if (empty($o[$res[$i]['isu_iss_id']])) {
+                    $o[$res[$i]['isu_iss_id']] = array();
+                }
+                $o[$res[$i]['isu_iss_id']][$res[$i]['isu_usr_id']] = $res[$i]['isu_order'];
+            }
             // now populate the $result variable again
             for ($i = 0; $i < count($result); $i++) {
                 @$result[$i]['assigned_users'] = $t[$result[$i]['iss_id']];
+                @$result[$i]['assigned_users_order'] = $o[$result[$i]['iss_id']];
             }
         }
     }
@@ -4247,6 +4358,7 @@
             Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
             return -1;
         }
+        self::moveOrderForAllUsers($issue_id, 1);
     }
 
 
@@ -4346,4 +4458,120 @@
         History::add($issue_id, Auth::getUserID(), History::getTypeID('user_associated'),
                         "Issue assignment to changed (" . History::formatChanges(join(', ', $old_assignee_names), join(', ', $assignee_names)) . ") by " . User::getFullName(Auth::getUserID()));
     }
+
+    /**
+     * Reorders user's issues as requested by user
+     * @access public
+     * @param $usr_id User to be reordered
+     * @param $issue_id Issue or array of issues to be moved
+     * @param $neworder The new order of the issues
+     * @return void
+     */
+    function reorderUserIssues($usr_id, $issue_id, $neworder)
+    {
+        if (!isset($usr_id) || !isset($issue_id) || !isset($neworder)) {
+            return false;
+        }
+        if (!is_numeric($usr_id) || !is_numeric($neworder)) {
+            return false;
+        }
+        $usr_id = Misc::escapeInteger($usr_id);
+        $issue_id = Misc::escapeInteger($issue_id);
+        $neworder = Misc::escapeInteger($neworder);
+        if (is_array($issue_id)) {
+            $issue_count = count($issue_id);
+            $issue_id_str = implode(", ", $issue_id);
+        } else {
+            $issue_count = 1;
+            $issue_id_str = $issue_id;
+            $issue_id = array($issue_id);
+        }
+        // do a nasty pretending to be deleting stuff so that reordering happens as if these elements were deleted
+        $orderlist = self::getDeleteUserAssociationOrderList($issue_id_str, $usr_id);
+        self::rearrangeDeleteUserAssociationOrderList($orderlist);
+        // move down the orders to free the "order space" needed
+        $stmt = "UPDATE 
+                    " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
+                 SET
+                    isu_order = isu_order + $issue_count
+                 WHERE
+                    isu_usr_id = $usr_id AND
+                    isu_order >= $neworder";
+        $res = DB_Helper::getInstance()->query($stmt);
+        if (PEAR::isError($res)) {
+            Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
+            return -1;
+        }
+        //update the order for the issues being moved
+        $i = 0;
+        foreach ($issue_id as $iss_id) {
+            $stmt = "UPDATE
+                        " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
+                     SET
+                        isu_order = " . ($neworder + $i) . "
+                     WHERE
+                        isu_usr_id = $usr_id AND
+                        isu_iss_id = $iss_id";
+            $res = DB_Helper::getInstance()->query($stmt);
+            if (PEAR::isError($res)) {
+                Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
+                return -1;
+            }
+            $i++;
+        }
+    }
+
+
+    /**
+     * Get users issue order list
+     * @access public
+     * @param $user_id User
+     * @param $order_list Order of the issues
+     * @return void
+     */
+    function getIssueOrderByUser($usr_id) {
+
+        if (!is_numeric($usr_id)) {
+            return false;
+        }
+
+        $stmt = "SELECT
+                    isu_iss_id, isu_order
+                FROM
+                    " . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
+                WHERE
+                    isu_usr_id = " . $usr_id ;
+
+        $order_list = array();
+
+        $res = DB_Helper::getInstance()->getAll($stmt, DB_FETCHMODE_ASSOC);
+
+        if (PEAR::isError($res)) {
+            Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
+            return array();
+        } else {
+            foreach ($res as $row) {
+                $order_list[$row["isu_iss_id"]] = $row["isu_order"];
+            }
+        }
+        return $order_list;
+    }
+
+    function moveOrderForAllUsers($issue_id, $neworder)
+    {
+        // Move the issue to the top priority for the ppl it's assigned to
+        $stmt = "SELECT isu_usr_id FROM
+                    "  . APP_DEFAULT_DB . "." . APP_TABLE_PREFIX . "issue_user
+                 WHERE
+                    isu_iss_id = " . Misc::escapeInteger($issue_id);
+        $res = DB_Helper::getInstance()->getAll($stmt, DB_FETCHMODE_ASSOC);
+        if (PEAR::isError($res)) {
+            Error_Handler::logError(array($res->getMessage(), $res->getDebugInfo()), __FILE__, __LINE__);
+            return -1;
+        }
+        foreach ($res as $row) {
+            self::reorderUserIssues($row["isu_usr_id"], $issue_id, $neworder);
+        }
+    }
+    
 }
--- eventum-2.2/templates/header.tpl.html~	2009-11-05 17:04:54.000000000 +0200
+++ eventum-2.2/templates/header.tpl.html	2009-11-05 17:05:17.976837914 +0200
@@ -18,6 +18,7 @@
 <script type="text/javascript" src="{$rel_url}js/jquery/form.js?c=9984"></script>
 <script type="text/javascript" src="{$rel_url}js/jquery/blockui.js?c=eb13"></script>
 <script type="text/javascript" src="{$rel_url}js/jquery/ui.datepicker.js?c=a911"></script>
+<script type="text/javascript" src="{$rel_url}js/jquery/jquery.tablednd.js"></script>
 <script type="text/javascript" src="{$rel_url}js/validation.js?c=901a"></script>
 <script type="text/javascript" src="{$rel_url}js/browserSniffer.js?c=c046"></script>
 <script type="text/javascript" src="{$rel_url}js/global.js?c=42a4"></script>
--- eventum-2.2/templates/list.tpl.html	2009-09-14 18:07:55.000000000 +0300
+++ eventum-2.2-order/templates/list.tpl.html	2009-10-12 22:10:36.439185157 +0300
@@ -92,6 +92,28 @@
     f.target = '_popup';
     f.submit();
 }
+function reorderBulk(order_user, neworder)
+{
+    url = page_url + "?";
+    url += "reorder_user=" + order_user;
+
+    items = document.getElementsByName("item[]");
+    checkedcount = 0;
+    for (var i = 0; i < items.length; i++) {
+      if (items[i].checked) {
+        url += "&reorder_source[" + checkedcount + "]=" + items[i].value;
+        checkedcount++;
+      }
+    }
+    if (checkedcount == 0) {
+        alert('{/literal}{t escape=js}Please choose which issues to move to the new place.{/t}{literal}');
+        return false;
+    }
+
+    url += "&reorder_neworder=" + neworder;
+    
+    window.location.href = url;
+}
 function hideClosed(f)
 {
     if (f.hide_closed.checked) {
@@ -153,6 +175,13 @@
         f.go.disabled = true;
     }
 }
+function updateCustomFields(issue_id)
+{
+    var features = 'width=560,height=460,top=30,left=30,resizable=yes,scrollbars=yes,toolbar=no,location=no,menubar=no,status=no';
+    var customWin = window.open('custom_fields.php?issue_id=' + issue_id, '_custom_fields', features);
+    customWin.focus();
+    return false;
+}
 //-->
 </script>
 {/literal}
@@ -169,11 +198,11 @@
   <input type="hidden" name="cat" value="bulk_update">
   <tr>
     <td>
-      <table bgcolor="#FFFFFF" width="100%" cellspacing="1" cellpadding="2" border="0">
-        <tr>
+      <table bgcolor="#FFFFFF" width="100%" cellspacing="1" cellpadding="2" border="0" id="issue_list_table">
+        <tr class="nodrag">
           <td colspan="{$col_count}" class="default">
             <table width="100%" cellspacing="0" cellpadding="0" border="0">
-              <tr>
+              <tr class="nodrag">
                 <td class="default">
                   <b>{t}Search Results{/t} ({$list_info.total_rows} {t}issues found{/t}{if $list_info.end_offset > 0}, {math equation="x + 1" x=$list_info.start_offset} - {$list_info.end_offset} {t}shown{/t}{/if})</b>
                   {include file="help_link.tpl.html" topic="list"}
@@ -193,7 +222,7 @@
             </table>
           </td>
         </tr>
-        <tr bgcolor="{$cell_color}">
+        <tr bgcolor="{$cell_color}" class="nodrag">
           {if $current_role > $roles.developer}
           <td width="1%">
             <input type="button" value="{t}All{/t}" class="shortcut" onClick="javascript:toggleSelectAll(this.form, 'item[]');toggleBulkUpdate();">
@@ -208,7 +237,7 @@
                   {if $sorting.images[$fld_name_id] != ""}<a title="{t}sort by{/t} {$fld_title|escape:"html"}" href="{$sorting.links[$fld_name_id]}" class="white_link"><img border="0" src="{$sorting.images[$fld_name_id]}"></a>{/if}
                 </td>
               {/foreach}
-          {else}
+          {elseif $field_name != 'isu_order' || $isu_order_user}
           <td align="{$column.align|default:'center'}" class="default_white" nowrap {if $column.width != ''}width="{$column.width}"{/if}>
             {if $field_name == 'iss_summary'}
             <table cellspacing="0" cellpadding="1" width="100%">
@@ -268,8 +268,9 @@
           {/if}
           {/foreach}
         </tr>
+        <tbody>
         {section name="i" loop=$list}
-        <tr {if $current_role >= $roles.developer AND $list[i].iqu_status > 0}style="text-decoration: line-through;"{/if}>
+        <tr {if $current_role >= $roles.developer AND $list[i].iqu_status > 0}style="text-decoration: line-through;"{/if} id="{$list[i].iss_id}" {if !$list[i].assigned_users_order[$current_user_id]}class="nodrag"{/if}>
           {if $current_role > $roles.developer}
           <td bgcolor="{$list[i].status_color}" width="1%" class="default" align="center"><input type="checkbox" name="item[]" value="{$list[i].iss_id}" onchange="toggleBulkUpdate();"></td>
           {/if}
@@ -280,8 +281,8 @@
                   {$fld_value|formatCustomValue:$fld_id:$list[i].iss_id}
                 </td>
               {/foreach}
-          {else}
-          <td bgcolor="{$list[i].status_color}" align="{$column.align|default:'center'}" class="default">
+          {elseif $field_name != 'isu_order' || $isu_order_user}
+          <td bgcolor="{$list[i].status_color}" align="{$column.align|default:'center'}" class="default{if $field_name == 'isu_order'} dragHandle{/if}">
             {if $field_name == 'iss_id'}
               <a href="view.php?id={$list[i].iss_id}" class="link" title="{t}view issue details{/t}">{$list[i].iss_id}</a>
             {elseif $field_name == 'pri_rank'}
@@ -288,6 +318,8 @@
               {if $list[i].iss_private == 1}
                   <b>[Private]</b>
               {/if}
+            {elseif $field_name == 'isu_order'}
+              {if $options.sort_by == "isu_order" and $current_user_id == $isu_order_user}&nbsp;{/if}
             {/if}
           </td>
           {/if}
@@ -300,10 +332,11 @@
           </td>
         </tr>
         {/section}
-        <tr bgcolor="{$cell_color}">
+        </tbody>
+        <tr bgcolor="{$cell_color}" class="nodrag">
           <td colspan="{$col_count}">
             <table width="100%" cellspacing="0" cellpadding="0">
-              <tr>
+              <tr class="nodrag">
                 <td width="30%" nowrap>
                   {if $current_role > $roles.developer}
                   <input type="button" value="{t}All{/t}" class="shortcut" onClick="javascript:toggleSelectAll(this.form, 'item[]');">
@@ -355,6 +388,35 @@
   </form>
 </table>
 <br />
-
+<script type="text/javascript">
+{*
+ * Order issues by drag and drop:
+ * only if sorted by order and viewing your own issues
+ *}
+{if $options.sort_by == "isu_order" and $current_user_id == $isu_order_user}
+{literal}
+var before = ''; // make it global variable
+$('#issue_list_table').tableDnD({
+    onDragClass: "tDnD_whileDrag",
+    onDragStart: function(table, row) {
+        before = $.tableDnD.serialize('id');
+    },
+    onDrop: function(table, row) {
+        $.post("/ajax/order.php", {before: before, after: $.tableDnD.serialize('id')}, function(data) {
+                if (data.length > 0) {
+                alert(data);
+            }
+        }, "text");
+    },
+	dragHandle: "dragHandle"
+});
+$("#issue_list_table tr").hover(function() {
+    $('#' + this.id + ' .dragHandle').addClass('showDragHandle');
+}, function() {
+    $('#' + this.id + ' .dragHandle').removeClass('showDragHandle');
+});
+{/literal}
+{/if}
+</script>
 {include file="app_info.tpl.html"}
 {include file="footer.tpl.html"}
